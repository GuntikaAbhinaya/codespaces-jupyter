pip install pandas scikit-learn

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# Load dataset
df = pd.read_csv('news.csv')  # Replace with the path to your dataset
# Assuming the dataset has columns: 'text' for news content and 'label' for news type (FAKE or REAL)

# Display the shape of the dataset and first few rows
print(df.shape)
print(df.head())

# Data preprocessing
labels = df.label
x_train, x_test, y_train, y_test = train_test_split(df['text'], labels, test_size=0.2, random_state=7)

# Initialize TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)

# Fit and transform train set, transform test set
tfidf_train = tfidf_vectorizer.fit_transform(x_train)
tfidf_test = tfidf_vectorizer.transform(x_test)

# Initialize PassiveAggressiveClassifier
pac = PassiveAggressiveClassifier(max_iter=50)
pac.fit(tfidf_train, y_train)

# Predict on test set and calculate accuracy
y_pred = pac.predict(tfidf_test)
score = accuracy_score(y_test, y_pred)
print(f'Accuracy: {round(score*100, 2)}%')

# Build confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred, labels=['FAKE', 'REAL'])
print(conf_matrix)

# Function to predict news
def predict_news(news):
    tfidf_news = tfidf_vectorizer.transform([news])
    prediction = pac.predict(tfidf_news)
    return prediction[0]

# Example usage
news = "Your news content here"
prediction = predict_news(news)
print(f'The news is predicted as: {prediction}')
